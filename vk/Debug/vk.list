
vk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004124  08004124  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800412c  0800412c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004130  08004130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004134  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08004190  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004190  000062ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beef  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf0  00000000  00000000  00011f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00013b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097d  00000000  00000000  00014780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fac  00000000  00000000  000150fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8af  00000000  00000000  0002c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008894f  00000000  00000000  00039958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c22a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  000c22ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c5aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004064 	.word	0x08004064

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004064 	.word	0x08004064

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fca4 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81a 	bl	800019c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f996 	bl	8000498 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f8f4 	bl	8000358 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000170:	f000 f850 	bl	8000214 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f966 	bl	8000444 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 8000178:	2201      	movs	r2, #1
 800017a:	4905      	ldr	r1, [pc, #20]	@ (8000190 <main+0x34>)
 800017c:	4805      	ldr	r0, [pc, #20]	@ (8000194 <main+0x38>)
 800017e:	f002 fd31 	bl	8002be4 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000182:	2100      	movs	r1, #0
 8000184:	4804      	ldr	r0, [pc, #16]	@ (8000198 <main+0x3c>)
 8000186:	f001 fda1 	bl	8001ccc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018a:	bf00      	nop
 800018c:	e7fd      	b.n	800018a <main+0x2e>
 800018e:	bf00      	nop
 8000190:	2000015b 	.word	0x2000015b
 8000194:	20000108 	.word	0x20000108
 8000198:	20000078 	.word	0x20000078

0800019c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b090      	sub	sp, #64	@ 0x40
 80001a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	2228      	movs	r2, #40	@ 0x28
 80001a8:	2100      	movs	r1, #0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f003 faca 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b0:	1d3b      	adds	r3, r7, #4
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001be:	2302      	movs	r3, #2
 80001c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c2:	2301      	movs	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c6:	2310      	movs	r3, #16
 80001c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ca:	2300      	movs	r3, #0
 80001cc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 f842 	bl	800125c <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001de:	f000 faad 	bl	800073c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fab0 	bl	8001760 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000206:	f000 fa99 	bl	800073c <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	@ 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	@ 0x58
 8000218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800021a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000228:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	2220      	movs	r2, #32
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f003 fa79 	bl	8003744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000252:	4b3f      	ldr	r3, [pc, #252]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000254:	4a3f      	ldr	r2, [pc, #252]	@ (8000354 <MX_TIM1_Init+0x140>)
 8000256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 8000258:	4b3d      	ldr	r3, [pc, #244]	@ (8000350 <MX_TIM1_Init+0x13c>)
 800025a:	2208      	movs	r2, #8
 800025c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800025e:	4b3c      	ldr	r3, [pc, #240]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000264:	4b3a      	ldr	r3, [pc, #232]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800026a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800026c:	4b38      	ldr	r3, [pc, #224]	@ (8000350 <MX_TIM1_Init+0x13c>)
 800026e:	2200      	movs	r2, #0
 8000270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000272:	4b37      	ldr	r3, [pc, #220]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000274:	2200      	movs	r2, #0
 8000276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000278:	4b35      	ldr	r3, [pc, #212]	@ (8000350 <MX_TIM1_Init+0x13c>)
 800027a:	2200      	movs	r2, #0
 800027c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800027e:	4834      	ldr	r0, [pc, #208]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000280:	f001 fbfc 	bl	8001a7c <HAL_TIM_Base_Init>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800028a:	f000 fa57 	bl	800073c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800028e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000292:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000294:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000298:	4619      	mov	r1, r3
 800029a:	482d      	ldr	r0, [pc, #180]	@ (8000350 <MX_TIM1_Init+0x13c>)
 800029c:	f001 ff6a 	bl	8002174 <HAL_TIM_ConfigClockSource>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80002a6:	f000 fa49 	bl	800073c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002aa:	4829      	ldr	r0, [pc, #164]	@ (8000350 <MX_TIM1_Init+0x13c>)
 80002ac:	f001 fcb6 	bl	8001c1c <HAL_TIM_PWM_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80002b6:	f000 fa41 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002ba:	2300      	movs	r3, #0
 80002bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002be:	2300      	movs	r3, #0
 80002c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002c6:	4619      	mov	r1, r3
 80002c8:	4821      	ldr	r0, [pc, #132]	@ (8000350 <MX_TIM1_Init+0x13c>)
 80002ca:	f002 faef 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80002d4:	f000 fa32 	bl	800073c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002d8:	2360      	movs	r3, #96	@ 0x60
 80002da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 499;
 80002dc:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002e2:	2300      	movs	r3, #0
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002e6:	2300      	movs	r3, #0
 80002e8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002ee:	2300      	movs	r3, #0
 80002f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002f2:	2300      	movs	r3, #0
 80002f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fa:	2200      	movs	r2, #0
 80002fc:	4619      	mov	r1, r3
 80002fe:	4814      	ldr	r0, [pc, #80]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000300:	f001 fe76 	bl	8001ff0 <HAL_TIM_PWM_ConfigChannel>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800030a:	f000 fa17 	bl	800073c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000326:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000328:	2300      	movs	r3, #0
 800032a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	4807      	ldr	r0, [pc, #28]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000332:	f002 fb19 	bl	8002968 <HAL_TIMEx_ConfigBreakDeadTime>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800033c:	f000 f9fe 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000340:	4803      	ldr	r0, [pc, #12]	@ (8000350 <MX_TIM1_Init+0x13c>)
 8000342:	f000 fa6b 	bl	800081c <HAL_TIM_MspPostInit>

}
 8000346:	bf00      	nop
 8000348:	3758      	adds	r7, #88	@ 0x58
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000078 	.word	0x20000078
 8000354:	40012c00 	.word	0x40012c00

08000358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08e      	sub	sp, #56	@ 0x38
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800035e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	f107 0320 	add.w	r3, r7, #32
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	609a      	str	r2, [r3, #8]
 8000380:	60da      	str	r2, [r3, #12]
 8000382:	611a      	str	r2, [r3, #16]
 8000384:	615a      	str	r2, [r3, #20]
 8000386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000388:	4b2d      	ldr	r3, [pc, #180]	@ (8000440 <MX_TIM2_Init+0xe8>)
 800038a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800038e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000390:	4b2b      	ldr	r3, [pc, #172]	@ (8000440 <MX_TIM2_Init+0xe8>)
 8000392:	2208      	movs	r2, #8
 8000394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000396:	4b2a      	ldr	r3, [pc, #168]	@ (8000440 <MX_TIM2_Init+0xe8>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800039c:	4b28      	ldr	r3, [pc, #160]	@ (8000440 <MX_TIM2_Init+0xe8>)
 800039e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a4:	4b26      	ldr	r3, [pc, #152]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003aa:	4b25      	ldr	r3, [pc, #148]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b0:	4823      	ldr	r0, [pc, #140]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003b2:	f001 fb63 	bl	8001a7c <HAL_TIM_Base_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003bc:	f000 f9be 	bl	800073c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003ca:	4619      	mov	r1, r3
 80003cc:	481c      	ldr	r0, [pc, #112]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003ce:	f001 fed1 	bl	8002174 <HAL_TIM_ConfigClockSource>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003d8:	f000 f9b0 	bl	800073c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003dc:	4818      	ldr	r0, [pc, #96]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003de:	f001 fc1d 	bl	8001c1c <HAL_TIM_PWM_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003e8:	f000 f9a8 	bl	800073c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f4:	f107 0320 	add.w	r3, r7, #32
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	@ (8000440 <MX_TIM2_Init+0xe8>)
 80003fc:	f002 fa56 	bl	80028ac <HAL_TIMEx_MasterConfigSynchronization>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000406:	f000 f999 	bl	800073c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040a:	2360      	movs	r3, #96	@ 0x60
 800040c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 800040e:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000412:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	4619      	mov	r1, r3
 8000422:	4807      	ldr	r0, [pc, #28]	@ (8000440 <MX_TIM2_Init+0xe8>)
 8000424:	f001 fde4 	bl	8001ff0 <HAL_TIM_PWM_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800042e:	f000 f985 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000432:	4803      	ldr	r0, [pc, #12]	@ (8000440 <MX_TIM2_Init+0xe8>)
 8000434:	f000 f9f2 	bl	800081c <HAL_TIM_MspPostInit>

}
 8000438:	bf00      	nop
 800043a:	3738      	adds	r7, #56	@ 0x38
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000c0 	.word	0x200000c0

08000444 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000448:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 800044a:	4a12      	ldr	r2, [pc, #72]	@ (8000494 <MX_USART1_UART_Init+0x50>)
 800044c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 8000450:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000454:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800047a:	4805      	ldr	r0, [pc, #20]	@ (8000490 <MX_USART1_UART_Init+0x4c>)
 800047c:	f002 fad7 	bl	8002a2e <HAL_UART_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000486:	f000 f959 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	20000108 	.word	0x20000108
 8000494:	40013800 	.word	0x40013800

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_GPIO_Init+0x5c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a10      	ldr	r2, [pc, #64]	@ (80004f4 <MX_GPIO_Init+0x5c>)
 80004b2:	f043 0304 	orr.w	r3, r3, #4
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_GPIO_Init+0x5c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0304 	and.w	r3, r3, #4
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MD20_MD2U_CCW_Pin|MD20_MD2U_ENA_Pin, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2106      	movs	r1, #6
 80004c8:	480b      	ldr	r0, [pc, #44]	@ (80004f8 <MX_GPIO_Init+0x60>)
 80004ca:	f000 fe95 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MD20_MD2U_CCW_Pin MD20_MD2U_ENA_Pin */
  GPIO_InitStruct.Pin = MD20_MD2U_CCW_Pin|MD20_MD2U_ENA_Pin;
 80004ce:	2306      	movs	r3, #6
 80004d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4619      	mov	r1, r3
 80004e4:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <MX_GPIO_Init+0x60>)
 80004e6:	f000 fd03 	bl	8000ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ea:	bf00      	nop
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <printf_uart>:

/* USER CODE BEGIN 4 */

void printf_uart(const char *mess) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)mess, strlen(mess), 500);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff fe21 	bl	800014c <strlen>
 800050a:	4603      	mov	r3, r0
 800050c:	b29a      	uxth	r2, r3
 800050e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	4803      	ldr	r0, [pc, #12]	@ (8000524 <printf_uart+0x28>)
 8000516:	f002 fada 	bl	8002ace <HAL_UART_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000108 	.word	0x20000108

08000528 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a36      	ldr	r2, [pc, #216]	@ (8000610 <HAL_UART_RxCpltCallback+0xe8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d165      	bne.n	8000606 <HAL_UART_RxCpltCallback+0xde>
        HAL_GPIO_WritePin(MD20_MD2U_ENA_GPIO_Port, MD20_MD2U_ENA_Pin, GPIO_PIN_SET); // DISENABLE động cơ
 800053a:	2201      	movs	r2, #1
 800053c:	2104      	movs	r1, #4
 800053e:	4835      	ldr	r0, [pc, #212]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 8000540:	f000 fe5a 	bl	80011f8 <HAL_GPIO_WritePin>
        if(last == 0 ){
 8000544:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d121      	bne.n	8000590 <HAL_UART_RxCpltCallback+0x68>
            mode = rxByte - '0'; // do giá trị UART nhận được là ASCII nên -'0' để đưa về INT
 800054c:	4b33      	ldr	r3, [pc, #204]	@ (800061c <HAL_UART_RxCpltCallback+0xf4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	3b30      	subs	r3, #48	@ 0x30
 8000552:	b2da      	uxtb	r2, r3
 8000554:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <HAL_UART_RxCpltCallback+0xf8>)
 8000556:	701a      	strb	r2, [r3, #0]
            if(mode == 3) {
 8000558:	4b31      	ldr	r3, [pc, #196]	@ (8000620 <HAL_UART_RxCpltCallback+0xf8>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d10e      	bne.n	800057e <HAL_UART_RxCpltCallback+0x56>
            	HAL_TIM_Base_Stop_IT(&htim1);
 8000560:	4830      	ldr	r0, [pc, #192]	@ (8000624 <HAL_UART_RxCpltCallback+0xfc>)
 8000562:	f001 fb2d 	bl	8001bc0 <HAL_TIM_Base_Stop_IT>
                last = 1;
 8000566:	4b2c      	ldr	r3, [pc, #176]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(MD20_MD2U_ENA_GPIO_Port, MD20_MD2U_ENA_Pin, GPIO_PIN_SET); // DISENABLE động cơ
 800056c:	2201      	movs	r2, #1
 800056e:	2104      	movs	r1, #4
 8000570:	4828      	ldr	r0, [pc, #160]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 8000572:	f000 fe41 	bl	80011f8 <HAL_GPIO_WritePin>
                printf_uart("bam so chon\n0. thoat\n1. thuan\n2. nguoc\n ");
 8000576:	482c      	ldr	r0, [pc, #176]	@ (8000628 <HAL_UART_RxCpltCallback+0x100>)
 8000578:	f7ff ffc0 	bl	80004fc <printf_uart>
 800057c:	e03e      	b.n	80005fc <HAL_UART_RxCpltCallback+0xd4>
            }
            else{
            	HAL_TIM_Base_Start_IT(&htim1);
 800057e:	4829      	ldr	r0, [pc, #164]	@ (8000624 <HAL_UART_RxCpltCallback+0xfc>)
 8000580:	f001 facc 	bl	8001b1c <HAL_TIM_Base_Start_IT>
            	HAL_GPIO_WritePin(MD20_MD2U_ENA_GPIO_Port, MD20_MD2U_ENA_Pin, GPIO_PIN_RESET); // ENABLE
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4822      	ldr	r0, [pc, #136]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 800058a:	f000 fe35 	bl	80011f8 <HAL_GPIO_WritePin>
 800058e:	e035      	b.n	80005fc <HAL_UART_RxCpltCallback+0xd4>
            }
        }
        else {
        	if(rxByte=='0'){
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <HAL_UART_RxCpltCallback+0xf4>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b30      	cmp	r3, #48	@ 0x30
 8000596:	d103      	bne.n	80005a0 <HAL_UART_RxCpltCallback+0x78>
        		last=0;
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	e02d      	b.n	80005fc <HAL_UART_RxCpltCallback+0xd4>
        	}
        	else{
				if(last==1){
 80005a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d115      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0xac>
					if(rxByte=='1'){
 80005a8:	4b1c      	ldr	r3, [pc, #112]	@ (800061c <HAL_UART_RxCpltCallback+0xf4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b31      	cmp	r3, #49	@ 0x31
 80005ae:	d105      	bne.n	80005bc <HAL_UART_RxCpltCallback+0x94>
						HAL_GPIO_WritePin(MD20_MD2U_CCW_GPIO_Port, MD20_MD2U_CCW_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2102      	movs	r1, #2
 80005b4:	4817      	ldr	r0, [pc, #92]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 80005b6:	f000 fe1f 	bl	80011f8 <HAL_GPIO_WritePin>
 80005ba:	e004      	b.n	80005c6 <HAL_UART_RxCpltCallback+0x9e>
					}
					else{
						HAL_GPIO_WritePin(MD20_MD2U_CCW_GPIO_Port, MD20_MD2U_CCW_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	4814      	ldr	r0, [pc, #80]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 80005c2:	f000 fe19 	bl	80011f8 <HAL_GPIO_WritePin>
					}
					last++;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e013      	b.n	80005fc <HAL_UART_RxCpltCallback+0xd4>
				}
				else{
					HAL_TIM_Base_Start_IT(&htim1);
 80005d4:	4813      	ldr	r0, [pc, #76]	@ (8000624 <HAL_UART_RxCpltCallback+0xfc>)
 80005d6:	f001 faa1 	bl	8001b1c <HAL_TIM_Base_Start_IT>
					vong = 0;
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_UART_RxCpltCallback+0x104>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
					nhap_vong = rxByte - '0';
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <HAL_UART_RxCpltCallback+0xf4>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3b30      	subs	r3, #48	@ 0x30
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <HAL_UART_RxCpltCallback+0x108>)
 80005ea:	701a      	strb	r2, [r3, #0]
					last=1;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <HAL_UART_RxCpltCallback+0xf0>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(MD20_MD2U_ENA_GPIO_Port, MD20_MD2U_ENA_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2104      	movs	r1, #4
 80005f6:	4807      	ldr	r0, [pc, #28]	@ (8000614 <HAL_UART_RxCpltCallback+0xec>)
 80005f8:	f000 fdfe 	bl	80011f8 <HAL_GPIO_WritePin>
				}
        	}
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxByte, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4907      	ldr	r1, [pc, #28]	@ (800061c <HAL_UART_RxCpltCallback+0xf4>)
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <HAL_UART_RxCpltCallback+0x10c>)
 8000602:	f002 faef 	bl	8002be4 <HAL_UART_Receive_IT>
    }
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40013800 	.word	0x40013800
 8000614:	40010800 	.word	0x40010800
 8000618:	20000158 	.word	0x20000158
 800061c:	2000015b 	.word	0x2000015b
 8000620:	2000015a 	.word	0x2000015a
 8000624:	20000078 	.word	0x20000078
 8000628:	0800407c 	.word	0x0800407c
 800062c:	20000154 	.word	0x20000154
 8000630:	20000159 	.word	0x20000159
 8000634:	20000108 	.word	0x20000108

08000638 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a32      	ldr	r2, [pc, #200]	@ (8000710 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d15e      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>

        if(mode != 3 && mode!=0){
 800064a:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d02b      	beq.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x72>
 8000652:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d027      	beq.n	80006aa <HAL_TIM_PeriodElapsedCallback+0x72>
        	flag++;
 800065a:	4b2f      	ldr	r3, [pc, #188]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a2d      	ldr	r2, [pc, #180]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000662:	6013      	str	r3, [r2, #0]
            if(flag >= 375){
 8000664:	4b2c      	ldr	r3, [pc, #176]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f5b3 7fbb 	cmp.w	r3, #374	@ 0x176
 800066c:	d94c      	bls.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>
                vong++;
 800066e:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3301      	adds	r3, #1
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000676:	6013      	str	r3, [r2, #0]
                sprintf(buffer, "vong : %lu\r\n", vong);
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4928      	ldr	r1, [pc, #160]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000680:	4828      	ldr	r0, [pc, #160]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000682:	f003 f83f 	bl	8003704 <siprintf>
                printf_uart(buffer);
 8000686:	4827      	ldr	r0, [pc, #156]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000688:	f7ff ff38 	bl	80004fc <printf_uart>

                if(mode == 2){
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b02      	cmp	r3, #2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
                	printf_uart("nguoc lai\n");
 8000694:	4824      	ldr	r0, [pc, #144]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000696:	f7ff ff31 	bl	80004fc <printf_uart>
                    HAL_GPIO_TogglePin(MD20_MD2U_CCW_GPIO_Port, MD20_MD2U_CCW_Pin);
 800069a:	2102      	movs	r1, #2
 800069c:	4823      	ldr	r0, [pc, #140]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800069e:	f000 fdc3 	bl	8001228 <HAL_GPIO_TogglePin>
                }
                flag=0;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
            if(flag >= 375){
 80006a8:	e02e      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>
            }
        }
        else {
        	flag++;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a19      	ldr	r2, [pc, #100]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006b2:	6013      	str	r3, [r2, #0]
        	if(flag >= 375){
 80006b4:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f5b3 7fbb 	cmp.w	r3, #374	@ 0x176
 80006bc:	d924      	bls.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>
				flag=0;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
				vong++;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006cc:	6013      	str	r3, [r2, #0]
				sprintf(buffer, "vong : %lu\r\n", vong);
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4912      	ldr	r1, [pc, #72]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80006d6:	4813      	ldr	r0, [pc, #76]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80006d8:	f003 f814 	bl	8003704 <siprintf>
				printf_uart(buffer);
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80006de:	f7ff ff0d 	bl	80004fc <printf_uart>
				if(vong == nhap_vong){
 80006e2:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d10b      	bne.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>
					printf_uart("bam so chon\n0. thoat\n1. thuan\n2. nguoc\n ");
 80006f0:	4810      	ldr	r0, [pc, #64]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80006f2:	f7ff ff03 	bl	80004fc <printf_uart>
					HAL_GPIO_WritePin(MD20_MD2U_ENA_GPIO_Port, MD20_MD2U_ENA_Pin, GPIO_PIN_SET); // DISABLE động cơ
 80006f6:	2201      	movs	r2, #1
 80006f8:	2104      	movs	r1, #4
 80006fa:	480c      	ldr	r0, [pc, #48]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80006fc:	f000 fd7c 	bl	80011f8 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim1);
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000702:	f001 fa5d 	bl	8001bc0 <HAL_TIM_Base_Stop_IT>
				}
        	}
        }
    }
}
 8000706:	e7ff      	b.n	8000708 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40012c00 	.word	0x40012c00
 8000714:	2000015a 	.word	0x2000015a
 8000718:	20000150 	.word	0x20000150
 800071c:	20000154 	.word	0x20000154
 8000720:	080040a8 	.word	0x080040a8
 8000724:	2000015c 	.word	0x2000015c
 8000728:	080040b8 	.word	0x080040b8
 800072c:	40010800 	.word	0x40010800
 8000730:	20000159 	.word	0x20000159
 8000734:	0800407c 	.word	0x0800407c
 8000738:	20000078 	.word	0x20000078

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <Error_Handler+0x8>

08000748 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074e:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_MspInit+0x5c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <HAL_MspInit+0x60>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_MspInit+0x60>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010000 	.word	0x40010000

080007ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a16      	ldr	r2, [pc, #88]	@ (8000814 <HAL_TIM_Base_MspInit+0x68>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d114      	bne.n	80007e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a15      	ldr	r2, [pc, #84]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 80007c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2019      	movs	r0, #25
 80007dc:	f000 fa9f 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007e0:	2019      	movs	r0, #25
 80007e2:	f000 fab8 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007e6:	e010      	b.n	800080a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007f0:	d10b      	bne.n	800080a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_TIM_Base_MspInit+0x6c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40012c00 	.word	0x40012c00
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <HAL_TIM_MspPostInit+0x98>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d119      	bne.n	8000870 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000854:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	4814      	ldr	r0, [pc, #80]	@ (80008bc <HAL_TIM_MspPostInit+0xa0>)
 800086a:	f000 fb41 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800086e:	e01c      	b.n	80008aa <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d117      	bne.n	80008aa <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a0e      	ldr	r2, [pc, #56]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_TIM_MspPostInit+0x9c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MD20_MD2U_CW_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MD20_MD2U_CW_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <HAL_TIM_MspPostInit+0xa0>)
 80008a6:	f000 fb23 	bl	8000ef0 <HAL_GPIO_Init>
}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40012c00 	.word	0x40012c00
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010800 	.word	0x40010800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a20      	ldr	r2, [pc, #128]	@ (800095c <HAL_UART_MspInit+0x9c>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d139      	bne.n	8000954 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 80008e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_UART_MspInit+0xa0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000914:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <HAL_UART_MspInit+0xa4>)
 8000926:	f000 fae3 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	4809      	ldr	r0, [pc, #36]	@ (8000964 <HAL_UART_MspInit+0xa4>)
 8000940:	f000 fad6 	bl	8000ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2101      	movs	r1, #1
 8000948:	2025      	movs	r0, #37	@ 0x25
 800094a:	f000 f9e8 	bl	8000d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094e:	2025      	movs	r0, #37	@ 0x25
 8000950:	f000 fa01 	bl	8000d56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013800 	.word	0x40013800
 8000960:	40021000 	.word	0x40021000
 8000964:	40010800 	.word	0x40010800

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f8be 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM1_UP_IRQHandler+0x10>)
 80009c6:	f001 fa23 	bl	8001e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000078 	.word	0x20000078

080009d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <USART1_IRQHandler+0x10>)
 80009da:	f002 f929 	bl	8002c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000108 	.word	0x20000108

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f002 fe9c 	bl	8003754 <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20005000 	.word	0x20005000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	2000019c 	.word	0x2000019c
 8000a50:	200002f0 	.word	0x200002f0

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff fff8 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a66:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a68:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a7c:	4c09      	ldr	r4, [pc, #36]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f002 fe69 	bl	8003760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fb65 	bl	800015c <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a9c:	08004134 	.word	0x08004134
  ldr r2, =_sbss
 8000aa0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000aa4:	200002ec 	.word	0x200002ec

08000aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_2_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f923 	bl	8000d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe3e 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f903 	bl	8000d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200001a0 	.word	0x200001a0

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	@ (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	200001a0 	.word	0x200001a0

08000b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
 8000bec:	4906      	ldr	r1, [pc, #24]	@ (8000c08 <__NVIC_EnableIRQ+0x34>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd4:	d301      	bcc.n	8000cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00f      	b.n	8000cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <SysTick_Config+0x40>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f7ff ff90 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <SysTick_Config+0x40>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <SysTick_Config+0x40>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff2d 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff42 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff35 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa2 	bl	8000cc4 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d008      	beq.n	8000db4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2204      	movs	r2, #4
 8000da6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e020      	b.n	8000df6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 020e 	bic.w	r2, r2, #14
 8000dc2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 0201 	bic.w	r2, r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d005      	beq.n	8000e24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e051      	b.n	8000ec8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020e 	bic.w	r2, r2, #14
 8000e32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0201 	bic.w	r2, r2, #1
 8000e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a22      	ldr	r2, [pc, #136]	@ (8000ed4 <HAL_DMA_Abort_IT+0xd4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d029      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0xa2>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a21      	ldr	r2, [pc, #132]	@ (8000ed8 <HAL_DMA_Abort_IT+0xd8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d022      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x9e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000edc <HAL_DMA_Abort_IT+0xdc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01a      	beq.n	8000e98 <HAL_DMA_Abort_IT+0x98>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <HAL_DMA_Abort_IT+0xe0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d012      	beq.n	8000e92 <HAL_DMA_Abort_IT+0x92>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee4 <HAL_DMA_Abort_IT+0xe4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00a      	beq.n	8000e8c <HAL_DMA_Abort_IT+0x8c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <HAL_DMA_Abort_IT+0xe8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d102      	bne.n	8000e86 <HAL_DMA_Abort_IT+0x86>
 8000e80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e84:	e00e      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000e86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e8a:	e00b      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000e8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e90:	e008      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000e92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e96:	e005      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9c:	e002      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	e000      	b.n	8000ea4 <HAL_DMA_Abort_IT+0xa4>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <HAL_DMA_Abort_IT+0xec>)
 8000ea6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d003      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	4798      	blx	r3
    } 
  }
  return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40020008 	.word	0x40020008
 8000ed8:	4002001c 	.word	0x4002001c
 8000edc:	40020030 	.word	0x40020030
 8000ee0:	40020044 	.word	0x40020044
 8000ee4:	40020058 	.word	0x40020058
 8000ee8:	4002006c 	.word	0x4002006c
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b08b      	sub	sp, #44	@ 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	e169      	b.n	80011d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	69fa      	ldr	r2, [r7, #28]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8158 	bne.w	80011d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a9a      	ldr	r2, [pc, #616]	@ (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d05e      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f2c:	4a98      	ldr	r2, [pc, #608]	@ (8001190 <HAL_GPIO_Init+0x2a0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d875      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f32:	4a98      	ldr	r2, [pc, #608]	@ (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d058      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f38:	4a96      	ldr	r2, [pc, #600]	@ (8001194 <HAL_GPIO_Init+0x2a4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d86f      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f3e:	4a96      	ldr	r2, [pc, #600]	@ (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d052      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f44:	4a94      	ldr	r2, [pc, #592]	@ (8001198 <HAL_GPIO_Init+0x2a8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d869      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f4a:	4a94      	ldr	r2, [pc, #592]	@ (800119c <HAL_GPIO_Init+0x2ac>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d04c      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f50:	4a92      	ldr	r2, [pc, #584]	@ (800119c <HAL_GPIO_Init+0x2ac>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d863      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f56:	4a92      	ldr	r2, [pc, #584]	@ (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
 8000f5c:	4a90      	ldr	r2, [pc, #576]	@ (80011a0 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d85d      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d82a      	bhi.n	8000fbc <HAL_GPIO_Init+0xcc>
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d859      	bhi.n	800101e <HAL_GPIO_Init+0x12e>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <HAL_GPIO_Init+0x80>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000feb 	.word	0x08000feb
 8000f74:	08000fc5 	.word	0x08000fc5
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08001019 	.word	0x08001019
 8000f80:	0800101f 	.word	0x0800101f
 8000f84:	0800101f 	.word	0x0800101f
 8000f88:	0800101f 	.word	0x0800101f
 8000f8c:	0800101f 	.word	0x0800101f
 8000f90:	0800101f 	.word	0x0800101f
 8000f94:	0800101f 	.word	0x0800101f
 8000f98:	0800101f 	.word	0x0800101f
 8000f9c:	0800101f 	.word	0x0800101f
 8000fa0:	0800101f 	.word	0x0800101f
 8000fa4:	0800101f 	.word	0x0800101f
 8000fa8:	0800101f 	.word	0x0800101f
 8000fac:	0800101f 	.word	0x0800101f
 8000fb0:	0800101f 	.word	0x0800101f
 8000fb4:	08000fcd 	.word	0x08000fcd
 8000fb8:	08000fe1 	.word	0x08000fe1
 8000fbc:	4a79      	ldr	r2, [pc, #484]	@ (80011a4 <HAL_GPIO_Init+0x2b4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fc2:	e02c      	b.n	800101e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e029      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e024      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e01f      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e01a      	b.n	8001020 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e013      	b.n	8001020 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d105      	bne.n	800100c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	611a      	str	r2, [r3, #16]
          break;
 800100a:	e009      	b.n	8001020 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800100c:	2308      	movs	r3, #8
 800100e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	615a      	str	r2, [r3, #20]
          break;
 8001016:	e003      	b.n	8001020 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
          break;
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x130>
          break;
 800101e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	@ 0xff
 8001024:	d801      	bhi.n	800102a <HAL_GPIO_Init+0x13a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	e001      	b.n	800102e <HAL_GPIO_Init+0x13e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3304      	adds	r3, #4
 800102e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	2bff      	cmp	r3, #255	@ 0xff
 8001034:	d802      	bhi.n	800103c <HAL_GPIO_Init+0x14c>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x152>
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	210f      	movs	r1, #15
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	401a      	ands	r2, r3
 8001054:	6a39      	ldr	r1, [r7, #32]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 80b1 	beq.w	80011d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a4c      	ldr	r2, [pc, #304]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <HAL_GPIO_Init+0x2b8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001088:	4a48      	ldr	r2, [pc, #288]	@ (80011ac <HAL_GPIO_Init+0x2bc>)
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a40      	ldr	r2, [pc, #256]	@ (80011b0 <HAL_GPIO_Init+0x2c0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1ec>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3f      	ldr	r2, [pc, #252]	@ (80011b4 <HAL_GPIO_Init+0x2c4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1e8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a3e      	ldr	r2, [pc, #248]	@ (80011b8 <HAL_GPIO_Init+0x2c8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a3d      	ldr	r2, [pc, #244]	@ (80011bc <HAL_GPIO_Init+0x2cc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e0>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1ee>
 80010dc:	2300      	movs	r3, #0
 80010de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ee:	492f      	ldr	r1, [pc, #188]	@ (80011ac <HAL_GPIO_Init+0x2bc>)
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	492c      	ldr	r1, [pc, #176]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001116:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	43db      	mvns	r3, r3
 800111e:	4928      	ldr	r1, [pc, #160]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001120:	4013      	ands	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	4922      	ldr	r1, [pc, #136]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	491e      	ldr	r1, [pc, #120]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4918      	ldr	r1, [pc, #96]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001166:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	490e      	ldr	r1, [pc, #56]	@ (80011c0 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
 800118c:	e021      	b.n	80011d2 <HAL_GPIO_Init+0x2e2>
 800118e:	bf00      	nop
 8001190:	10320000 	.word	0x10320000
 8001194:	10310000 	.word	0x10310000
 8001198:	10220000 	.word	0x10220000
 800119c:	10210000 	.word	0x10210000
 80011a0:	10120000 	.word	0x10120000
 80011a4:	10110000 	.word	0x10110000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40011000 	.word	0x40011000
 80011bc:	40011400 	.word	0x40011400
 80011c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4909      	ldr	r1, [pc, #36]	@ (80011f4 <HAL_GPIO_Init+0x304>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	3301      	adds	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae8e 	bne.w	8000f04 <HAL_GPIO_Init+0x14>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	372c      	adds	r7, #44	@ 0x2c
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43d9      	mvns	r1, r3
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	400b      	ands	r3, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e272      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8087 	beq.w	800138a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800127c:	4b92      	ldr	r3, [pc, #584]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b04      	cmp	r3, #4
 8001286:	d00c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001288:	4b8f      	ldr	r3, [pc, #572]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b08      	cmp	r3, #8
 8001292:	d112      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
 8001294:	4b8c      	ldr	r3, [pc, #560]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a0:	d10b      	bne.n	80012ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d06c      	beq.n	8001388 <HAL_RCC_OscConfig+0x12c>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d168      	bne.n	8001388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e24c      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c2:	d106      	bne.n	80012d2 <HAL_RCC_OscConfig+0x76>
 80012c4:	4b80      	ldr	r3, [pc, #512]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a7f      	ldr	r2, [pc, #508]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e02e      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b7b      	ldr	r3, [pc, #492]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7a      	ldr	r2, [pc, #488]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b78      	ldr	r3, [pc, #480]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a77      	ldr	r2, [pc, #476]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e01d      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0xbc>
 80012fe:	4b72      	ldr	r3, [pc, #456]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a71      	ldr	r2, [pc, #452]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6f      	ldr	r3, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6e      	ldr	r2, [pc, #440]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00b      	b.n	8001330 <HAL_RCC_OscConfig+0xd4>
 8001318:	4b6b      	ldr	r3, [pc, #428]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a6a      	ldr	r2, [pc, #424]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b68      	ldr	r3, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a67      	ldr	r2, [pc, #412]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800132e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d013      	beq.n	8001360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc10 	bl	8000b5c <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fc0c 	bl	8000b5c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	@ 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e200      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0xe4>
 800135e:	e014      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fbfc 	bl	8000b5c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fbf8 	bl	8000b5c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	@ 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e1ec      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	4b53      	ldr	r3, [pc, #332]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x10c>
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d063      	beq.n	800145e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001396:	4b4c      	ldr	r3, [pc, #304]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00b      	beq.n	80013ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a2:	4b49      	ldr	r3, [pc, #292]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d11c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
 80013ae:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d116      	bne.n	80013e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d001      	beq.n	80013d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1c0      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4939      	ldr	r1, [pc, #228]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	e03a      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d020      	beq.n	8001432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b36      	ldr	r3, [pc, #216]	@ (80014cc <HAL_RCC_OscConfig+0x270>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fbb1 	bl	8000b5c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbad 	bl	8000b5c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1a1      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4927      	ldr	r1, [pc, #156]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <HAL_RCC_OscConfig+0x270>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb90 	bl	8000b5c <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fb8c 	bl	8000b5c <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e180      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d03a      	beq.n	80014e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_RCC_OscConfig+0x274>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff fb70 	bl	8000b5c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff fb6c 	bl	8000b5c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e160      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_RCC_OscConfig+0x26c>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 face 	bl	8001a40 <RCC_Delay>
 80014a4:	e01c      	b.n	80014e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <HAL_RCC_OscConfig+0x274>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb56 	bl	8000b5c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b2:	e00f      	b.n	80014d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb52 	bl	8000b5c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d908      	bls.n	80014d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e146      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	42420000 	.word	0x42420000
 80014d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e9      	bne.n	80014b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a6 	beq.w	800163a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10d      	bne.n	800151a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b88      	ldr	r3, [pc, #544]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a87      	ldr	r2, [pc, #540]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b85      	ldr	r3, [pc, #532]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151a:	4b82      	ldr	r3, [pc, #520]	@ (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d118      	bne.n	8001558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001526:	4b7f      	ldr	r3, [pc, #508]	@ (8001724 <HAL_RCC_OscConfig+0x4c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a7e      	ldr	r2, [pc, #504]	@ (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800152c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001532:	f7ff fb13 	bl	8000b5c <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153a:	f7ff fb0f 	bl	8000b5c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b64      	cmp	r3, #100	@ 0x64
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e103      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <HAL_RCC_OscConfig+0x4c8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x312>
 8001560:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a6e      	ldr	r2, [pc, #440]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e02d      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0x334>
 8001576:	4b6a      	ldr	r3, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a69      	ldr	r2, [pc, #420]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b67      	ldr	r3, [pc, #412]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a66      	ldr	r2, [pc, #408]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e01c      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x356>
 8001598:	4b61      	ldr	r3, [pc, #388]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a60      	ldr	r2, [pc, #384]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x36e>
 80015b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a57      	ldr	r2, [pc, #348]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d015      	beq.n	80015fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d2:	f7ff fac3 	bl	8000b5c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fabf 	bl	8000b5c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0b1      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0ee      	beq.n	80015da <HAL_RCC_OscConfig+0x37e>
 80015fc:	e014      	b.n	8001628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fe:	f7ff faad 	bl	8000b5c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001606:	f7ff faa9 	bl	8000b5c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e09b      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	4b40      	ldr	r3, [pc, #256]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ee      	bne.n	8001606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d105      	bne.n	800163a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162e:	4b3c      	ldr	r3, [pc, #240]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a3b      	ldr	r2, [pc, #236]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b08      	cmp	r3, #8
 800164e:	d061      	beq.n	8001714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d146      	bne.n	80016e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001658:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <HAL_RCC_OscConfig+0x4cc>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff fa7d 	bl	8000b5c <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001666:	f7ff fa79 	bl	8000b5c <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e06d      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168c:	d108      	bne.n	80016a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4921      	ldr	r1, [pc, #132]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a19      	ldr	r1, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	430b      	orrs	r3, r1
 80016b2:	491b      	ldr	r1, [pc, #108]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x4cc>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fa4d 	bl	8000b5c <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fa49 	bl	8000b5c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e03d      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46a>
 80016e4:	e035      	b.n	8001752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fa36 	bl	8000b5c <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f4:	f7ff fa32 	bl	8000b5c <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e026      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x498>
 8001712:	e01e      	b.n	8001752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e019      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
 8001720:	40021000 	.word	0x40021000
 8001724:	40007000 	.word	0x40007000
 8001728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_OscConfig+0x500>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	429a      	cmp	r2, r3
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d001      	beq.n	8001752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0207 	bic.w	r2, r3, #7
 800178a:	4965      	ldr	r1, [pc, #404]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a58      	ldr	r2, [pc, #352]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a52      	ldr	r2, [pc, #328]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	4313      	orrs	r3, r2
 800184e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff f984 	bl	8000b5c <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f980 	bl	8000b5c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 0207 	bic.w	r2, r3, #7
 8001896:	4922      	ldr	r1, [pc, #136]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	@ (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	@ (800192c <HAL_RCC_ClockConfig+0x1cc>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f8e2 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	080040c4 	.word	0x080040c4
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x30>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x36>
 8001962:	e027      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001966:	613b      	str	r3, [r7, #16]
      break;
 8001968:	e027      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	0c5b      	lsrs	r3, r3, #17
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	fb03 f202 	mul.w	r2, r3, r2
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e004      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0c      	ldr	r2, [pc, #48]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	613b      	str	r3, [r7, #16]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x98>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ba:	693b      	ldr	r3, [r7, #16]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	371c      	adds	r7, #28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	080040dc 	.word	0x080040dc
 80019d4:	080040ec 	.word	0x080040ec
 80019d8:	003d0900 	.word	0x003d0900

080019dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e0:	4b02      	ldr	r3, [pc, #8]	@ (80019ec <HAL_RCC_GetHCLKFreq+0x10>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	20000000 	.word	0x20000000

080019f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f4:	f7ff fff2 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 80019f8:	4602      	mov	r2, r0
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	4903      	ldr	r1, [pc, #12]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a06:	5ccb      	ldrb	r3, [r1, r3]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	080040d4 	.word	0x080040d4

08001a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	0adb      	lsrs	r3, r3, #11
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4903      	ldr	r1, [pc, #12]	@ (8001a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	080040d4 	.word	0x080040d4

08001a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <RCC_Delay+0x34>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <RCC_Delay+0x38>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a5c:	bf00      	nop
  }
  while (Delay --);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <RCC_Delay+0x1c>
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7fe fe82 	bl	80007ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 fc46 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d001      	beq.n	8001b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e03a      	b.n	8001baa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_TIM_Base_Start_IT+0x98>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00e      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5e:	d009      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d004      	beq.n	8001b74 <HAL_TIM_Base_Start_IT+0x58>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_TIM_Base_Start_IT+0xa0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d111      	bne.n	8001b98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d010      	beq.n	8001ba8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b96:	e007      	b.n	8001ba8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0201 	bic.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <HAL_TIM_Base_Stop_IT+0x48>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6a1a      	ldr	r2, [r3, #32]
 8001bee:	f240 4344 	movw	r3, #1092	@ 0x444
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_Base_Stop_IT+0x48>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f839 	bl	8001cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 fb76 	bl	800234c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_TIM_PWM_Start+0x24>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e022      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d109      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x3e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e015      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d109      	bne.n	8001d24 <HAL_TIM_PWM_Start+0x58>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e008      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e05e      	b.n	8001dfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <HAL_TIM_PWM_Start+0x82>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d4c:	e013      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d104      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x92>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d5c:	e00b      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_PWM_Start+0xa2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d6c:	e003      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd70 	bl	8002864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_TIM_PWM_Start+0x138>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d107      	bne.n	8001d9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a18      	ldr	r2, [pc, #96]	@ (8001e04 <HAL_TIM_PWM_Start+0x138>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0xfa>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db0:	d009      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0xfa>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <HAL_TIM_PWM_Start+0x13c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0xfa>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <HAL_TIM_PWM_Start+0x140>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d111      	bne.n	8001dea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b06      	cmp	r3, #6
 8001dd6:	d010      	beq.n	8001dfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de8:	e007      	b.n	8001dfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	40000400 	.word	0x40000400
 8001e0c:	40000800 	.word	0x40000800

08001e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d020      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01b      	beq.n	8001e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0202 	mvn.w	r2, #2
 8001e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa5a 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fa4d 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fa5c 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d020      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01b      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0204 	mvn.w	r2, #4
 8001e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fa34 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fa27 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fa36 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0208 	mvn.w	r2, #8
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fa0e 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa01 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fa10 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0210 	mvn.w	r2, #16
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f9e8 	bl	8002314 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9db 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9ea 	bl	8002326 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0201 	mvn.w	r2, #1
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fb5e 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fd3e 	bl	8002a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f9ba 	bl	8002338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0220 	mvn.w	r2, #32
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fd11 	bl	8002a0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ae      	b.n	800216c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0c      	cmp	r3, #12
 800201a:	f200 809f 	bhi.w	800215c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800201e:	a201      	add	r2, pc, #4	@ (adr r2, 8002024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002059 	.word	0x08002059
 8002028:	0800215d 	.word	0x0800215d
 800202c:	0800215d 	.word	0x0800215d
 8002030:	0800215d 	.word	0x0800215d
 8002034:	08002099 	.word	0x08002099
 8002038:	0800215d 	.word	0x0800215d
 800203c:	0800215d 	.word	0x0800215d
 8002040:	0800215d 	.word	0x0800215d
 8002044:	080020db 	.word	0x080020db
 8002048:	0800215d 	.word	0x0800215d
 800204c:	0800215d 	.word	0x0800215d
 8002050:	0800215d 	.word	0x0800215d
 8002054:	0800211b 	.word	0x0800211b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f9e2 	bl	8002428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6999      	ldr	r1, [r3, #24]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	619a      	str	r2, [r3, #24]
      break;
 8002096:	e064      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fa28 	bl	80024f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699a      	ldr	r2, [r3, #24]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6999      	ldr	r1, [r3, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	619a      	str	r2, [r3, #24]
      break;
 80020d8:	e043      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa71 	bl	80025c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69da      	ldr	r2, [r3, #28]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0208 	orr.w	r2, r2, #8
 80020f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0204 	bic.w	r2, r2, #4
 8002104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	61da      	str	r2, [r3, #28]
      break;
 8002118:	e023      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fabb 	bl	800269c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	69da      	ldr	r2, [r3, #28]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69d9      	ldr	r1, [r3, #28]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	021a      	lsls	r2, r3, #8
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	61da      	str	r2, [r3, #28]
      break;
 800215a:	e002      	b.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
      break;
 8002160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_TIM_ConfigClockSource+0x1c>
 800218c:	2302      	movs	r3, #2
 800218e:	e0b4      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x186>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021c8:	d03e      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xd4>
 80021ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ce:	f200 8087 	bhi.w	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021d6:	f000 8086 	beq.w	80022e6 <HAL_TIM_ConfigClockSource+0x172>
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021de:	d87f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e0:	2b70      	cmp	r3, #112	@ 0x70
 80021e2:	d01a      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xa6>
 80021e4:	2b70      	cmp	r3, #112	@ 0x70
 80021e6:	d87b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b60      	cmp	r3, #96	@ 0x60
 80021ea:	d050      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x11a>
 80021ec:	2b60      	cmp	r3, #96	@ 0x60
 80021ee:	d877      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b50      	cmp	r3, #80	@ 0x50
 80021f2:	d03c      	beq.n	800226e <HAL_TIM_ConfigClockSource+0xfa>
 80021f4:	2b50      	cmp	r3, #80	@ 0x50
 80021f6:	d873      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d058      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x13a>
 80021fc:	2b40      	cmp	r3, #64	@ 0x40
 80021fe:	d86f      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b30      	cmp	r3, #48	@ 0x30
 8002202:	d064      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002204:	2b30      	cmp	r3, #48	@ 0x30
 8002206:	d86b      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b20      	cmp	r3, #32
 800220a:	d060      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 800220c:	2b20      	cmp	r3, #32
 800220e:	d867      	bhi.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d05c      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	2b10      	cmp	r3, #16
 8002216:	d05a      	beq.n	80022ce <HAL_TIM_ConfigClockSource+0x15a>
 8002218:	e062      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800222a:	f000 fafc 	bl	8002826 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800223c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	609a      	str	r2, [r3, #8]
      break;
 8002246:	e04f      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002258:	f000 fae5 	bl	8002826 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800226a:	609a      	str	r2, [r3, #8]
      break;
 800226c:	e03c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	461a      	mov	r2, r3
 800227c:	f000 fa5c 	bl	8002738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2150      	movs	r1, #80	@ 0x50
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fab3 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 800228c:	e02c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800229a:	461a      	mov	r2, r3
 800229c:	f000 fa7a 	bl	8002794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2160      	movs	r1, #96	@ 0x60
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 faa3 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 80022ac:	e01c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ba:	461a      	mov	r2, r3
 80022bc:	f000 fa3c 	bl	8002738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2140      	movs	r1, #64	@ 0x40
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fa93 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 80022cc:	e00c      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f000 fa8a 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 80022de:	e003      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      break;
 80022e4:	e000      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
	...

0800234c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a2f      	ldr	r2, [pc, #188]	@ (800241c <TIM_Base_SetConfig+0xd0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00b      	beq.n	800237c <TIM_Base_SetConfig+0x30>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x30>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <TIM_Base_SetConfig+0xd4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x30>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <TIM_Base_SetConfig+0xd8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <TIM_Base_SetConfig+0xd0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <TIM_Base_SetConfig+0x62>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0x62>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002420 <TIM_Base_SetConfig+0xd4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002424 <TIM_Base_SetConfig+0xd8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <TIM_Base_SetConfig+0xd0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f023 0201 	bic.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]
  }
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800

08002428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 0201 	bic.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a1c      	ldr	r2, [pc, #112]	@ (80024f0 <TIM_OC1_SetConfig+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d10c      	bne.n	800249e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 0308 	bic.w	r3, r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f023 0304 	bic.w	r3, r3, #4
 800249c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a13      	ldr	r2, [pc, #76]	@ (80024f0 <TIM_OC1_SetConfig+0xc8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40012c00 	.word	0x40012c00

080024f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f023 0210 	bic.w	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4313      	orrs	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f023 0320 	bic.w	r3, r3, #32
 800253e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800256e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <TIM_OC2_SetConfig+0xd0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d113      	bne.n	80025a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800257e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	621a      	str	r2, [r3, #32]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10d      	bne.n	8002642 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800262c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <TIM_OC3_SetConfig+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	621a      	str	r2, [r3, #32]
}
 800268c:	bf00      	nop
 800268e:	371c      	adds	r7, #28
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	031b      	lsls	r3, r3, #12
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <TIM_OC4_SetConfig+0x98>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d109      	bne.n	8002710 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	621a      	str	r2, [r3, #32]
}
 800272a:	bf00      	nop
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00

08002738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 030a 	bic.w	r3, r3, #10
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f023 0210 	bic.w	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	031b      	lsls	r3, r3, #12
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	621a      	str	r2, [r3, #32]
}
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	f043 0307 	orr.w	r3, r3, #7
 8002814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002826:	b480      	push	{r7}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002840:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	021a      	lsls	r2, r3, #8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4313      	orrs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2201      	movs	r2, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1a      	ldr	r2, [r3, #32]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e046      	b.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002910:	d009      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10c      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800292c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4313      	orrs	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e03d      	b.n	8002a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e042      	b.n	8002ac6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fd ff33 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2224      	movs	r2, #36	@ 0x24
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fdb8 	bl	80035e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b08a      	sub	sp, #40	@ 0x28
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d175      	bne.n	8002bda <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_UART_Transmit+0x2c>
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06e      	b.n	8002bdc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2221      	movs	r2, #33	@ 0x21
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0c:	f7fe f826 	bl	8000b5c <HAL_GetTick>
 8002b10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	88fa      	ldrh	r2, [r7, #6]
 8002b16:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b26:	d108      	bne.n	8002b3a <HAL_UART_Transmit+0x6c>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e003      	b.n	8002b42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b42:	e02e      	b.n	8002ba2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2180      	movs	r1, #128	@ 0x80
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fb1d 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e03a      	b.n	8002bdc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	3302      	adds	r3, #2
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e007      	b.n	8002b94 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1cb      	bne.n	8002b44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2140      	movs	r1, #64	@ 0x40
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fae9 	bl	800318e <UART_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e006      	b.n	8002bdc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d112      	bne.n	8002c24 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_Receive_IT+0x26>
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00b      	b.n	8002c26 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fb10 	bl	8003240 <UART_Start_Receive_IT>
 8002c20:	4603      	mov	r3, r0
 8002c22:	e000      	b.n	8002c26 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0ba      	sub	sp, #232	@ 0xe8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_UART_IRQHandler+0x66>
 8002c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fbec 	bl	800346c <UART_Receive_IT>
      return;
 8002c94:	e25b      	b.n	800314e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80de 	beq.w	8002e5c <HAL_UART_IRQHandler+0x22c>
 8002ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80d1 	beq.w	8002e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_UART_IRQHandler+0xae>
 8002cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_UART_IRQHandler+0xd2>
 8002cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_UART_IRQHandler+0xf6>
 8002d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f043 0204 	orr.w	r2, r3, #4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d011      	beq.n	8002d56 <HAL_UART_IRQHandler+0x126>
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f043 0208 	orr.w	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 81f2 	beq.w	8003144 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_UART_IRQHandler+0x14e>
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fb77 	bl	800346c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_UART_IRQHandler+0x17a>
 8002da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d04f      	beq.n	8002e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa81 	bl	80032b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d041      	beq.n	8002e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3314      	adds	r3, #20
 8002de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002dea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1d9      	bne.n	8002dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d013      	beq.n	8002e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	4a7e      	ldr	r2, [pc, #504]	@ (8003010 <HAL_UART_IRQHandler+0x3e0>)
 8002e18:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd ffee 	bl	8000e00 <HAL_DMA_Abort_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e34:	4610      	mov	r0, r2
 8002e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	e00e      	b.n	8002e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f993 	bl	8003166 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	e00a      	b.n	8002e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f98f 	bl	8003166 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e48:	e006      	b.n	8002e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f98b 	bl	8003166 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e56:	e175      	b.n	8003144 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	bf00      	nop
    return;
 8002e5a:	e173      	b.n	8003144 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 814f 	bne.w	8003104 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8148 	beq.w	8003104 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8141 	beq.w	8003104 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80b6 	beq.w	8003014 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8145 	beq.w	8003148 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f080 813e 	bcs.w	8003148 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f000 8088 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002efa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002efe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f0c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f18:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1d9      	bne.n	8002ee0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3314      	adds	r3, #20
 8002f32:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f50:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e1      	bne.n	8002f2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f8c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e3      	bne.n	8002f68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	330c      	adds	r3, #12
 8002fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc0:	f023 0310 	bic.w	r3, r3, #16
 8002fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fd4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e3      	bne.n	8002fae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fecd 	bl	8000d8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8b6 	bl	8003178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800300c:	e09c      	b.n	8003148 <HAL_UART_IRQHandler+0x518>
 800300e:	bf00      	nop
 8003010:	08003377 	.word	0x08003377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 808e 	beq.w	800314c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8089 	beq.w	800314c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003050:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800305e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003060:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800306c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e3      	bne.n	800303a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	623b      	str	r3, [r7, #32]
   return(result);
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	3314      	adds	r3, #20
 8003092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003096:	633a      	str	r2, [r7, #48]	@ 0x30
 8003098:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800309c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e3      	bne.n	8003072 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f023 0310 	bic.w	r3, r3, #16
 80030ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030dc:	61fa      	str	r2, [r7, #28]
 80030de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	69b9      	ldr	r1, [r7, #24]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	617b      	str	r3, [r7, #20]
   return(result);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e3      	bne.n	80030b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f83b 	bl	8003178 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003102:	e023      	b.n	800314c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d009      	beq.n	8003124 <HAL_UART_IRQHandler+0x4f4>
 8003110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f93e 	bl	800339e <UART_Transmit_IT>
    return;
 8003122:	e014      	b.n	800314e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <HAL_UART_IRQHandler+0x51e>
 8003130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f97d 	bl	800343c <UART_EndTransmit_IT>
    return;
 8003142:	e004      	b.n	800314e <HAL_UART_IRQHandler+0x51e>
    return;
 8003144:	bf00      	nop
 8003146:	e002      	b.n	800314e <HAL_UART_IRQHandler+0x51e>
      return;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <HAL_UART_IRQHandler+0x51e>
      return;
 800314c:	bf00      	nop
  }
}
 800314e:	37e8      	adds	r7, #232	@ 0xe8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800319e:	e03b      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d037      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7fd fcd8 	bl	8000b5c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	6a3a      	ldr	r2, [r7, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <UART_WaitOnFlagUntilTimeout+0x30>
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e03a      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d023      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b80      	cmp	r3, #128	@ 0x80
 80031d4:	d020      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d01d      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d116      	bne.n	8003218 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f856 	bl	80032b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2208      	movs	r2, #8
 800320a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00f      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0b4      	beq.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	4613      	mov	r3, r2
 800324c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2222      	movs	r2, #34	@ 0x22
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003284:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b095      	sub	sp, #84	@ 0x54
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032da:	643a      	str	r2, [r7, #64]	@ 0x40
 80032dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800330e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	2b01      	cmp	r3, #1
 8003328:	d119      	bne.n	800335e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	60bb      	str	r3, [r7, #8]
   return(result);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f023 0310 	bic.w	r3, r3, #16
 8003340:	647b      	str	r3, [r7, #68]	@ 0x44
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800334a:	61ba      	str	r2, [r7, #24]
 800334c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6979      	ldr	r1, [r7, #20]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	613b      	str	r3, [r7, #16]
   return(result);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800336c:	bf00      	nop
 800336e:	3754      	adds	r7, #84	@ 0x54
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff fee8 	bl	8003166 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b21      	cmp	r3, #33	@ 0x21
 80033b0:	d13e      	bne.n	8003430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ba:	d114      	bne.n	80033e6 <UART_Transmit_IT+0x48>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d110      	bne.n	80033e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]
 80033e4:	e008      	b.n	80033f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6211      	str	r1, [r2, #32]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29b      	uxth	r3, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4619      	mov	r1, r3
 8003406:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800341a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800342a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003452:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff fe79 	bl	8003154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	@ 0x30
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b22      	cmp	r3, #34	@ 0x22
 800347e:	f040 80ae 	bne.w	80035de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348a:	d117      	bne.n	80034bc <UART_Receive_IT+0x50>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ba:	e026      	b.n	800350a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ce:	d007      	beq.n	80034e0 <UART_Receive_IT+0x74>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <UART_Receive_IT+0x82>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e008      	b.n	8003500 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4619      	mov	r1, r3
 8003518:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800351a:	2b00      	cmp	r3, #0
 800351c:	d15d      	bne.n	80035da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0220 	bic.w	r2, r2, #32
 800352c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800353c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	2b01      	cmp	r3, #1
 8003562:	d135      	bne.n	80035d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	613b      	str	r3, [r7, #16]
   return(result);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 0310 	bic.w	r3, r3, #16
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	330c      	adds	r3, #12
 8003588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358a:	623a      	str	r2, [r7, #32]
 800358c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	69f9      	ldr	r1, [r7, #28]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	61bb      	str	r3, [r7, #24]
   return(result);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e5      	bne.n	800356a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d10a      	bne.n	80035c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fdd5 	bl	8003178 <HAL_UARTEx_RxEventCallback>
 80035ce:	e002      	b.n	80035d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fc ffa9 	bl	8000528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e002      	b.n	80035e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3730      	adds	r7, #48	@ 0x30
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003622:	f023 030c 	bic.w	r3, r3, #12
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2c      	ldr	r2, [pc, #176]	@ (80036fc <UART_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003650:	f7fe f9e2 	bl	8001a18 <HAL_RCC_GetPCLK2Freq>
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	e002      	b.n	800365e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7fe f9ca 	bl	80019f0 <HAL_RCC_GetPCLK1Freq>
 800365c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	4a22      	ldr	r2, [pc, #136]	@ (8003700 <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	0119      	lsls	r1, r3, #4
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fbb2 f2f3 	udiv	r2, r2, r3
 8003694:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <UART_SetConfig+0x118>)
 8003696:	fba3 0302 	umull	r0, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2064      	movs	r0, #100	@ 0x64
 800369e:	fb00 f303 	mul.w	r3, r0, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	@ 0x32
 80036a8:	4a15      	ldr	r2, [pc, #84]	@ (8003700 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b4:	4419      	add	r1, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <UART_SetConfig+0x118>)
 80036ce:	fba3 0302 	umull	r0, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2064      	movs	r0, #100	@ 0x64
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	@ 0x32
 80036e0:	4a07      	ldr	r2, [pc, #28]	@ (8003700 <UART_SetConfig+0x118>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	440a      	add	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40013800 	.word	0x40013800
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <siprintf>:
 8003704:	b40e      	push	{r1, r2, r3}
 8003706:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800370a:	b500      	push	{lr}
 800370c:	b09c      	sub	sp, #112	@ 0x70
 800370e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003710:	9002      	str	r0, [sp, #8]
 8003712:	9006      	str	r0, [sp, #24]
 8003714:	9107      	str	r1, [sp, #28]
 8003716:	9104      	str	r1, [sp, #16]
 8003718:	4808      	ldr	r0, [pc, #32]	@ (800373c <siprintf+0x38>)
 800371a:	4909      	ldr	r1, [pc, #36]	@ (8003740 <siprintf+0x3c>)
 800371c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003720:	9105      	str	r1, [sp, #20]
 8003722:	6800      	ldr	r0, [r0, #0]
 8003724:	a902      	add	r1, sp, #8
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	f000 f992 	bl	8003a50 <_svfiprintf_r>
 800372c:	2200      	movs	r2, #0
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	b01c      	add	sp, #112	@ 0x70
 8003734:	f85d eb04 	ldr.w	lr, [sp], #4
 8003738:	b003      	add	sp, #12
 800373a:	4770      	bx	lr
 800373c:	2000000c 	.word	0x2000000c
 8003740:	ffff0208 	.word	0xffff0208

08003744 <memset>:
 8003744:	4603      	mov	r3, r0
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <__errno>:
 8003754:	4b01      	ldr	r3, [pc, #4]	@ (800375c <__errno+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	2000000c 	.word	0x2000000c

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2600      	movs	r6, #0
 8003764:	4d0c      	ldr	r5, [pc, #48]	@ (8003798 <__libc_init_array+0x38>)
 8003766:	4c0d      	ldr	r4, [pc, #52]	@ (800379c <__libc_init_array+0x3c>)
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	f000 fc78 	bl	8004064 <_init>
 8003774:	2600      	movs	r6, #0
 8003776:	4d0a      	ldr	r5, [pc, #40]	@ (80037a0 <__libc_init_array+0x40>)
 8003778:	4c0a      	ldr	r4, [pc, #40]	@ (80037a4 <__libc_init_array+0x44>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f855 3b04 	ldr.w	r3, [r5], #4
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	0800412c 	.word	0x0800412c
 800379c:	0800412c 	.word	0x0800412c
 80037a0:	0800412c 	.word	0x0800412c
 80037a4:	08004130 	.word	0x08004130

080037a8 <__retarget_lock_acquire_recursive>:
 80037a8:	4770      	bx	lr

080037aa <__retarget_lock_release_recursive>:
 80037aa:	4770      	bx	lr

080037ac <_free_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4605      	mov	r5, r0
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d040      	beq.n	8003836 <_free_r+0x8a>
 80037b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b8:	1f0c      	subs	r4, r1, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfb8      	it	lt
 80037be:	18e4      	addlt	r4, r4, r3
 80037c0:	f000 f8de 	bl	8003980 <__malloc_lock>
 80037c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <_free_r+0x8c>)
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	b933      	cbnz	r3, 80037d8 <_free_r+0x2c>
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	6014      	str	r4, [r2, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d4:	f000 b8da 	b.w	800398c <__malloc_unlock>
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d908      	bls.n	80037ee <_free_r+0x42>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf01      	itttt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	1809      	addeq	r1, r1, r0
 80037ea:	6021      	streq	r1, [r4, #0]
 80037ec:	e7ed      	b.n	80037ca <_free_r+0x1e>
 80037ee:	461a      	mov	r2, r3
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b10b      	cbz	r3, 80037f8 <_free_r+0x4c>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d9fa      	bls.n	80037ee <_free_r+0x42>
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	1850      	adds	r0, r2, r1
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d10b      	bne.n	8003818 <_free_r+0x6c>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	4401      	add	r1, r0
 8003804:	1850      	adds	r0, r2, r1
 8003806:	4283      	cmp	r3, r0
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	d1e0      	bne.n	80037ce <_free_r+0x22>
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4408      	add	r0, r1
 8003812:	6010      	str	r0, [r2, #0]
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	e7da      	b.n	80037ce <_free_r+0x22>
 8003818:	d902      	bls.n	8003820 <_free_r+0x74>
 800381a:	230c      	movs	r3, #12
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	e7d6      	b.n	80037ce <_free_r+0x22>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	1821      	adds	r1, r4, r0
 8003824:	428b      	cmp	r3, r1
 8003826:	bf01      	itttt	eq
 8003828:	6819      	ldreq	r1, [r3, #0]
 800382a:	685b      	ldreq	r3, [r3, #4]
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6054      	str	r4, [r2, #4]
 8003834:	e7cb      	b.n	80037ce <_free_r+0x22>
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	200002e8 	.word	0x200002e8

0800383c <sbrk_aligned>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4e0f      	ldr	r6, [pc, #60]	@ (800387c <sbrk_aligned+0x40>)
 8003840:	460c      	mov	r4, r1
 8003842:	6831      	ldr	r1, [r6, #0]
 8003844:	4605      	mov	r5, r0
 8003846:	b911      	cbnz	r1, 800384e <sbrk_aligned+0x12>
 8003848:	f000 fbaa 	bl	8003fa0 <_sbrk_r>
 800384c:	6030      	str	r0, [r6, #0]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	f000 fba5 	bl	8003fa0 <_sbrk_r>
 8003856:	1c43      	adds	r3, r0, #1
 8003858:	d103      	bne.n	8003862 <sbrk_aligned+0x26>
 800385a:	f04f 34ff 	mov.w	r4, #4294967295
 800385e:	4620      	mov	r0, r4
 8003860:	bd70      	pop	{r4, r5, r6, pc}
 8003862:	1cc4      	adds	r4, r0, #3
 8003864:	f024 0403 	bic.w	r4, r4, #3
 8003868:	42a0      	cmp	r0, r4
 800386a:	d0f8      	beq.n	800385e <sbrk_aligned+0x22>
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4628      	mov	r0, r5
 8003870:	f000 fb96 	bl	8003fa0 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1f2      	bne.n	800385e <sbrk_aligned+0x22>
 8003878:	e7ef      	b.n	800385a <sbrk_aligned+0x1e>
 800387a:	bf00      	nop
 800387c:	200002e4 	.word	0x200002e4

08003880 <_malloc_r>:
 8003880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4606      	mov	r6, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d904      	bls.n	80038a6 <_malloc_r+0x26>
 800389c:	230c      	movs	r3, #12
 800389e:	6033      	str	r3, [r6, #0]
 80038a0:	2000      	movs	r0, #0
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800397c <_malloc_r+0xfc>
 80038aa:	f000 f869 	bl	8003980 <__malloc_lock>
 80038ae:	f8d8 3000 	ldr.w	r3, [r8]
 80038b2:	461c      	mov	r4, r3
 80038b4:	bb44      	cbnz	r4, 8003908 <_malloc_r+0x88>
 80038b6:	4629      	mov	r1, r5
 80038b8:	4630      	mov	r0, r6
 80038ba:	f7ff ffbf 	bl	800383c <sbrk_aligned>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	4604      	mov	r4, r0
 80038c2:	d158      	bne.n	8003976 <_malloc_r+0xf6>
 80038c4:	f8d8 4000 	ldr.w	r4, [r8]
 80038c8:	4627      	mov	r7, r4
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	d143      	bne.n	8003956 <_malloc_r+0xd6>
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d04b      	beq.n	800396a <_malloc_r+0xea>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	4639      	mov	r1, r7
 80038d6:	4630      	mov	r0, r6
 80038d8:	eb04 0903 	add.w	r9, r4, r3
 80038dc:	f000 fb60 	bl	8003fa0 <_sbrk_r>
 80038e0:	4581      	cmp	r9, r0
 80038e2:	d142      	bne.n	800396a <_malloc_r+0xea>
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	4630      	mov	r0, r6
 80038e8:	1a6d      	subs	r5, r5, r1
 80038ea:	4629      	mov	r1, r5
 80038ec:	f7ff ffa6 	bl	800383c <sbrk_aligned>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d03a      	beq.n	800396a <_malloc_r+0xea>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	442b      	add	r3, r5
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	f8d8 3000 	ldr.w	r3, [r8]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	bb62      	cbnz	r2, 800395c <_malloc_r+0xdc>
 8003902:	f8c8 7000 	str.w	r7, [r8]
 8003906:	e00f      	b.n	8003928 <_malloc_r+0xa8>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	1b52      	subs	r2, r2, r5
 800390c:	d420      	bmi.n	8003950 <_malloc_r+0xd0>
 800390e:	2a0b      	cmp	r2, #11
 8003910:	d917      	bls.n	8003942 <_malloc_r+0xc2>
 8003912:	1961      	adds	r1, r4, r5
 8003914:	42a3      	cmp	r3, r4
 8003916:	6025      	str	r5, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	6059      	strne	r1, [r3, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	bf08      	it	eq
 8003920:	f8c8 1000 	streq.w	r1, [r8]
 8003924:	5162      	str	r2, [r4, r5]
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	4630      	mov	r0, r6
 800392a:	f000 f82f 	bl	800398c <__malloc_unlock>
 800392e:	f104 000b 	add.w	r0, r4, #11
 8003932:	1d23      	adds	r3, r4, #4
 8003934:	f020 0007 	bic.w	r0, r0, #7
 8003938:	1ac2      	subs	r2, r0, r3
 800393a:	bf1c      	itt	ne
 800393c:	1a1b      	subne	r3, r3, r0
 800393e:	50a3      	strne	r3, [r4, r2]
 8003940:	e7af      	b.n	80038a2 <_malloc_r+0x22>
 8003942:	6862      	ldr	r2, [r4, #4]
 8003944:	42a3      	cmp	r3, r4
 8003946:	bf0c      	ite	eq
 8003948:	f8c8 2000 	streq.w	r2, [r8]
 800394c:	605a      	strne	r2, [r3, #4]
 800394e:	e7eb      	b.n	8003928 <_malloc_r+0xa8>
 8003950:	4623      	mov	r3, r4
 8003952:	6864      	ldr	r4, [r4, #4]
 8003954:	e7ae      	b.n	80038b4 <_malloc_r+0x34>
 8003956:	463c      	mov	r4, r7
 8003958:	687f      	ldr	r7, [r7, #4]
 800395a:	e7b6      	b.n	80038ca <_malloc_r+0x4a>
 800395c:	461a      	mov	r2, r3
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	42a3      	cmp	r3, r4
 8003962:	d1fb      	bne.n	800395c <_malloc_r+0xdc>
 8003964:	2300      	movs	r3, #0
 8003966:	6053      	str	r3, [r2, #4]
 8003968:	e7de      	b.n	8003928 <_malloc_r+0xa8>
 800396a:	230c      	movs	r3, #12
 800396c:	4630      	mov	r0, r6
 800396e:	6033      	str	r3, [r6, #0]
 8003970:	f000 f80c 	bl	800398c <__malloc_unlock>
 8003974:	e794      	b.n	80038a0 <_malloc_r+0x20>
 8003976:	6005      	str	r5, [r0, #0]
 8003978:	e7d6      	b.n	8003928 <_malloc_r+0xa8>
 800397a:	bf00      	nop
 800397c:	200002e8 	.word	0x200002e8

08003980 <__malloc_lock>:
 8003980:	4801      	ldr	r0, [pc, #4]	@ (8003988 <__malloc_lock+0x8>)
 8003982:	f7ff bf11 	b.w	80037a8 <__retarget_lock_acquire_recursive>
 8003986:	bf00      	nop
 8003988:	200002e0 	.word	0x200002e0

0800398c <__malloc_unlock>:
 800398c:	4801      	ldr	r0, [pc, #4]	@ (8003994 <__malloc_unlock+0x8>)
 800398e:	f7ff bf0c 	b.w	80037aa <__retarget_lock_release_recursive>
 8003992:	bf00      	nop
 8003994:	200002e0 	.word	0x200002e0

08003998 <__ssputs_r>:
 8003998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	461f      	mov	r7, r3
 800399e:	688e      	ldr	r6, [r1, #8]
 80039a0:	4682      	mov	sl, r0
 80039a2:	42be      	cmp	r6, r7
 80039a4:	460c      	mov	r4, r1
 80039a6:	4690      	mov	r8, r2
 80039a8:	680b      	ldr	r3, [r1, #0]
 80039aa:	d82d      	bhi.n	8003a08 <__ssputs_r+0x70>
 80039ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039b4:	d026      	beq.n	8003a04 <__ssputs_r+0x6c>
 80039b6:	6965      	ldr	r5, [r4, #20]
 80039b8:	6909      	ldr	r1, [r1, #16]
 80039ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039be:	eba3 0901 	sub.w	r9, r3, r1
 80039c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039c6:	1c7b      	adds	r3, r7, #1
 80039c8:	444b      	add	r3, r9
 80039ca:	106d      	asrs	r5, r5, #1
 80039cc:	429d      	cmp	r5, r3
 80039ce:	bf38      	it	cc
 80039d0:	461d      	movcc	r5, r3
 80039d2:	0553      	lsls	r3, r2, #21
 80039d4:	d527      	bpl.n	8003a26 <__ssputs_r+0x8e>
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7ff ff52 	bl	8003880 <_malloc_r>
 80039dc:	4606      	mov	r6, r0
 80039de:	b360      	cbz	r0, 8003a3a <__ssputs_r+0xa2>
 80039e0:	464a      	mov	r2, r9
 80039e2:	6921      	ldr	r1, [r4, #16]
 80039e4:	f000 fafa 	bl	8003fdc <memcpy>
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	6126      	str	r6, [r4, #16]
 80039f6:	444e      	add	r6, r9
 80039f8:	6026      	str	r6, [r4, #0]
 80039fa:	463e      	mov	r6, r7
 80039fc:	6165      	str	r5, [r4, #20]
 80039fe:	eba5 0509 	sub.w	r5, r5, r9
 8003a02:	60a5      	str	r5, [r4, #8]
 8003a04:	42be      	cmp	r6, r7
 8003a06:	d900      	bls.n	8003a0a <__ssputs_r+0x72>
 8003a08:	463e      	mov	r6, r7
 8003a0a:	4632      	mov	r2, r6
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	6820      	ldr	r0, [r4, #0]
 8003a10:	f000 faac 	bl	8003f6c <memmove>
 8003a14:	2000      	movs	r0, #0
 8003a16:	68a3      	ldr	r3, [r4, #8]
 8003a18:	1b9b      	subs	r3, r3, r6
 8003a1a:	60a3      	str	r3, [r4, #8]
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	4433      	add	r3, r6
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	462a      	mov	r2, r5
 8003a28:	f000 fae6 	bl	8003ff8 <_realloc_r>
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d1e0      	bne.n	80039f4 <__ssputs_r+0x5c>
 8003a32:	4650      	mov	r0, sl
 8003a34:	6921      	ldr	r1, [r4, #16]
 8003a36:	f7ff feb9 	bl	80037ac <_free_r>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	f8ca 3000 	str.w	r3, [sl]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	f04f 30ff 	mov.w	r0, #4294967295
 8003a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	e7e9      	b.n	8003a22 <__ssputs_r+0x8a>
	...

08003a50 <_svfiprintf_r>:
 8003a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a54:	4698      	mov	r8, r3
 8003a56:	898b      	ldrh	r3, [r1, #12]
 8003a58:	4607      	mov	r7, r0
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	460d      	mov	r5, r1
 8003a5e:	4614      	mov	r4, r2
 8003a60:	b09d      	sub	sp, #116	@ 0x74
 8003a62:	d510      	bpl.n	8003a86 <_svfiprintf_r+0x36>
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	b973      	cbnz	r3, 8003a86 <_svfiprintf_r+0x36>
 8003a68:	2140      	movs	r1, #64	@ 0x40
 8003a6a:	f7ff ff09 	bl	8003880 <_malloc_r>
 8003a6e:	6028      	str	r0, [r5, #0]
 8003a70:	6128      	str	r0, [r5, #16]
 8003a72:	b930      	cbnz	r0, 8003a82 <_svfiprintf_r+0x32>
 8003a74:	230c      	movs	r3, #12
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	b01d      	add	sp, #116	@ 0x74
 8003a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a82:	2340      	movs	r3, #64	@ 0x40
 8003a84:	616b      	str	r3, [r5, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a90:	2330      	movs	r3, #48	@ 0x30
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c34 <_svfiprintf_r+0x1e4>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_svfiprintf_r+0x60>
 8003aac:	2a25      	cmp	r2, #37	@ 0x25
 8003aae:	d1f9      	bne.n	8003aa4 <_svfiprintf_r+0x54>
 8003ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab4:	d00b      	beq.n	8003ace <_svfiprintf_r+0x7e>
 8003ab6:	465b      	mov	r3, fp
 8003ab8:	4622      	mov	r2, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff6b 	bl	8003998 <__ssputs_r>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f000 80a7 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aca:	445a      	add	r2, fp
 8003acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 809f 	beq.w	8003c16 <_svfiprintf_r+0x1c6>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae2:	f10a 0a01 	add.w	sl, sl, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003af0:	4654      	mov	r4, sl
 8003af2:	2205      	movs	r2, #5
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	484e      	ldr	r0, [pc, #312]	@ (8003c34 <_svfiprintf_r+0x1e4>)
 8003afa:	f000 fa61 	bl	8003fc0 <memchr>
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	b9d8      	cbnz	r0, 8003b3a <_svfiprintf_r+0xea>
 8003b02:	06d0      	lsls	r0, r2, #27
 8003b04:	bf44      	itt	mi
 8003b06:	2320      	movmi	r3, #32
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b0c:	0711      	lsls	r1, r2, #28
 8003b0e:	bf44      	itt	mi
 8003b10:	232b      	movmi	r3, #43	@ 0x2b
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b1c:	d015      	beq.n	8003b4a <_svfiprintf_r+0xfa>
 8003b1e:	4654      	mov	r4, sl
 8003b20:	2000      	movs	r0, #0
 8003b22:	f04f 0c0a 	mov.w	ip, #10
 8003b26:	9a07      	ldr	r2, [sp, #28]
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2e:	3b30      	subs	r3, #48	@ 0x30
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d94b      	bls.n	8003bcc <_svfiprintf_r+0x17c>
 8003b34:	b1b0      	cbz	r0, 8003b64 <_svfiprintf_r+0x114>
 8003b36:	9207      	str	r2, [sp, #28]
 8003b38:	e014      	b.n	8003b64 <_svfiprintf_r+0x114>
 8003b3a:	eba0 0308 	sub.w	r3, r0, r8
 8003b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	46a2      	mov	sl, r4
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	e7d2      	b.n	8003af0 <_svfiprintf_r+0xa0>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	1d19      	adds	r1, r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbb      	ittet	lt
 8003b56:	425b      	neglt	r3, r3
 8003b58:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5c:	9307      	strge	r3, [sp, #28]
 8003b5e:	9307      	strlt	r3, [sp, #28]
 8003b60:	bfb8      	it	lt
 8003b62:	9204      	strlt	r2, [sp, #16]
 8003b64:	7823      	ldrb	r3, [r4, #0]
 8003b66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b68:	d10a      	bne.n	8003b80 <_svfiprintf_r+0x130>
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6e:	d132      	bne.n	8003bd6 <_svfiprintf_r+0x186>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	3402      	adds	r4, #2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9203      	str	r2, [sp, #12]
 8003b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b7e:	9305      	str	r3, [sp, #20]
 8003b80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c38 <_svfiprintf_r+0x1e8>
 8003b84:	2203      	movs	r2, #3
 8003b86:	4650      	mov	r0, sl
 8003b88:	7821      	ldrb	r1, [r4, #0]
 8003b8a:	f000 fa19 	bl	8003fc0 <memchr>
 8003b8e:	b138      	cbz	r0, 8003ba0 <_svfiprintf_r+0x150>
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	eba0 000a 	sub.w	r0, r0, sl
 8003b98:	4082      	lsls	r2, r0
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	3401      	adds	r4, #1
 8003b9e:	9304      	str	r3, [sp, #16]
 8003ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	4825      	ldr	r0, [pc, #148]	@ (8003c3c <_svfiprintf_r+0x1ec>)
 8003ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bac:	f000 fa08 	bl	8003fc0 <memchr>
 8003bb0:	2800      	cmp	r0, #0
 8003bb2:	d036      	beq.n	8003c22 <_svfiprintf_r+0x1d2>
 8003bb4:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <_svfiprintf_r+0x1f0>)
 8003bb6:	bb1b      	cbnz	r3, 8003c00 <_svfiprintf_r+0x1b0>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3307      	adds	r3, #7
 8003bbc:	f023 0307 	bic.w	r3, r3, #7
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bc6:	4433      	add	r3, r6
 8003bc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bca:	e76a      	b.n	8003aa2 <_svfiprintf_r+0x52>
 8003bcc:	460c      	mov	r4, r1
 8003bce:	2001      	movs	r0, #1
 8003bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bd4:	e7a8      	b.n	8003b28 <_svfiprintf_r+0xd8>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4619      	mov	r1, r3
 8003bde:	3401      	adds	r4, #1
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	4620      	mov	r0, r4
 8003be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be8:	3a30      	subs	r2, #48	@ 0x30
 8003bea:	2a09      	cmp	r2, #9
 8003bec:	d903      	bls.n	8003bf6 <_svfiprintf_r+0x1a6>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0c6      	beq.n	8003b80 <_svfiprintf_r+0x130>
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	e7c4      	b.n	8003b80 <_svfiprintf_r+0x130>
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bfe:	e7f0      	b.n	8003be2 <_svfiprintf_r+0x192>
 8003c00:	ab03      	add	r3, sp, #12
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	462a      	mov	r2, r5
 8003c06:	4638      	mov	r0, r7
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c0a:	a904      	add	r1, sp, #16
 8003c0c:	f3af 8000 	nop.w
 8003c10:	1c42      	adds	r2, r0, #1
 8003c12:	4606      	mov	r6, r0
 8003c14:	d1d6      	bne.n	8003bc4 <_svfiprintf_r+0x174>
 8003c16:	89ab      	ldrh	r3, [r5, #12]
 8003c18:	065b      	lsls	r3, r3, #25
 8003c1a:	f53f af2d 	bmi.w	8003a78 <_svfiprintf_r+0x28>
 8003c1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c20:	e72c      	b.n	8003a7c <_svfiprintf_r+0x2c>
 8003c22:	ab03      	add	r3, sp, #12
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	462a      	mov	r2, r5
 8003c28:	4638      	mov	r0, r7
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <_svfiprintf_r+0x1f4>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	f000 f87d 	bl	8003d2c <_printf_i>
 8003c32:	e7ed      	b.n	8003c10 <_svfiprintf_r+0x1c0>
 8003c34:	080040ee 	.word	0x080040ee
 8003c38:	080040f4 	.word	0x080040f4
 8003c3c:	080040f8 	.word	0x080040f8
 8003c40:	00000000 	.word	0x00000000
 8003c44:	08003999 	.word	0x08003999

08003c48 <_printf_common>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4616      	mov	r6, r2
 8003c4e:	4698      	mov	r8, r3
 8003c50:	688a      	ldr	r2, [r1, #8]
 8003c52:	690b      	ldr	r3, [r1, #16]
 8003c54:	4607      	mov	r7, r0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	bfb8      	it	lt
 8003c5a:	4613      	movlt	r3, r2
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c62:	460c      	mov	r4, r1
 8003c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c68:	b10a      	cbz	r2, 8003c6e <_printf_common+0x26>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0699      	lsls	r1, r3, #26
 8003c72:	bf42      	ittt	mi
 8003c74:	6833      	ldrmi	r3, [r6, #0]
 8003c76:	3302      	addmi	r3, #2
 8003c78:	6033      	strmi	r3, [r6, #0]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d106      	bne.n	8003c90 <_printf_common+0x48>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dc2b      	bgt.n	8003ce8 <_printf_common+0xa0>
 8003c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	3b00      	subs	r3, #0
 8003c98:	bf18      	it	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	0692      	lsls	r2, r2, #26
 8003c9e:	d430      	bmi.n	8003d02 <_printf_common+0xba>
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ca8:	47c8      	blx	r9
 8003caa:	3001      	adds	r0, #1
 8003cac:	d023      	beq.n	8003cf6 <_printf_common+0xae>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	6922      	ldr	r2, [r4, #16]
 8003cb2:	f003 0306 	and.w	r3, r3, #6
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	bf14      	ite	ne
 8003cba:	2500      	movne	r5, #0
 8003cbc:	6833      	ldreq	r3, [r6, #0]
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	bf08      	it	eq
 8003cc4:	68e5      	ldreq	r5, [r4, #12]
 8003cc6:	f104 041a 	add.w	r4, r4, #26
 8003cca:	bf08      	it	eq
 8003ccc:	1aed      	subeq	r5, r5, r3
 8003cce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cd2:	bf08      	it	eq
 8003cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	bfc4      	itt	gt
 8003cdc:	1a9b      	subgt	r3, r3, r2
 8003cde:	18ed      	addgt	r5, r5, r3
 8003ce0:	42b5      	cmp	r5, r6
 8003ce2:	d11a      	bne.n	8003d1a <_printf_common+0xd2>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	e008      	b.n	8003cfa <_printf_common+0xb2>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4652      	mov	r2, sl
 8003cec:	4641      	mov	r1, r8
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c8      	blx	r9
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d103      	bne.n	8003cfe <_printf_common+0xb6>
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	3501      	adds	r5, #1
 8003d00:	e7c1      	b.n	8003c86 <_printf_common+0x3e>
 8003d02:	2030      	movs	r0, #48	@ 0x30
 8003d04:	18e1      	adds	r1, r4, r3
 8003d06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d10:	4422      	add	r2, r4
 8003d12:	3302      	adds	r3, #2
 8003d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d18:	e7c2      	b.n	8003ca0 <_printf_common+0x58>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	4641      	mov	r1, r8
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c8      	blx	r9
 8003d24:	3001      	adds	r0, #1
 8003d26:	d0e6      	beq.n	8003cf6 <_printf_common+0xae>
 8003d28:	3601      	adds	r6, #1
 8003d2a:	e7d9      	b.n	8003ce0 <_printf_common+0x98>

08003d2c <_printf_i>:
 8003d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d30:	7e0f      	ldrb	r7, [r1, #24]
 8003d32:	4691      	mov	r9, r2
 8003d34:	2f78      	cmp	r7, #120	@ 0x78
 8003d36:	4680      	mov	r8, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	469a      	mov	sl, r3
 8003d3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d42:	d807      	bhi.n	8003d54 <_printf_i+0x28>
 8003d44:	2f62      	cmp	r7, #98	@ 0x62
 8003d46:	d80a      	bhi.n	8003d5e <_printf_i+0x32>
 8003d48:	2f00      	cmp	r7, #0
 8003d4a:	f000 80d3 	beq.w	8003ef4 <_printf_i+0x1c8>
 8003d4e:	2f58      	cmp	r7, #88	@ 0x58
 8003d50:	f000 80ba 	beq.w	8003ec8 <_printf_i+0x19c>
 8003d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d5c:	e03a      	b.n	8003dd4 <_printf_i+0xa8>
 8003d5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d62:	2b15      	cmp	r3, #21
 8003d64:	d8f6      	bhi.n	8003d54 <_printf_i+0x28>
 8003d66:	a101      	add	r1, pc, #4	@ (adr r1, 8003d6c <_printf_i+0x40>)
 8003d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dd9 	.word	0x08003dd9
 8003d74:	08003d55 	.word	0x08003d55
 8003d78:	08003d55 	.word	0x08003d55
 8003d7c:	08003d55 	.word	0x08003d55
 8003d80:	08003d55 	.word	0x08003d55
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003d55 	.word	0x08003d55
 8003d8c:	08003d55 	.word	0x08003d55
 8003d90:	08003d55 	.word	0x08003d55
 8003d94:	08003d55 	.word	0x08003d55
 8003d98:	08003edb 	.word	0x08003edb
 8003d9c:	08003e03 	.word	0x08003e03
 8003da0:	08003e95 	.word	0x08003e95
 8003da4:	08003d55 	.word	0x08003d55
 8003da8:	08003d55 	.word	0x08003d55
 8003dac:	08003efd 	.word	0x08003efd
 8003db0:	08003d55 	.word	0x08003d55
 8003db4:	08003e03 	.word	0x08003e03
 8003db8:	08003d55 	.word	0x08003d55
 8003dbc:	08003d55 	.word	0x08003d55
 8003dc0:	08003e9d 	.word	0x08003e9d
 8003dc4:	6833      	ldr	r3, [r6, #0]
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6032      	str	r2, [r6, #0]
 8003dcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e09e      	b.n	8003f16 <_printf_i+0x1ea>
 8003dd8:	6833      	ldr	r3, [r6, #0]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	6031      	str	r1, [r6, #0]
 8003de0:	0606      	lsls	r6, r0, #24
 8003de2:	d501      	bpl.n	8003de8 <_printf_i+0xbc>
 8003de4:	681d      	ldr	r5, [r3, #0]
 8003de6:	e003      	b.n	8003df0 <_printf_i+0xc4>
 8003de8:	0645      	lsls	r5, r0, #25
 8003dea:	d5fb      	bpl.n	8003de4 <_printf_i+0xb8>
 8003dec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xd0>
 8003df4:	232d      	movs	r3, #45	@ 0x2d
 8003df6:	426d      	negs	r5, r5
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	4859      	ldr	r0, [pc, #356]	@ (8003f64 <_printf_i+0x238>)
 8003e00:	e011      	b.n	8003e26 <_printf_i+0xfa>
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	0608      	lsls	r0, r1, #24
 8003e08:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e0c:	d402      	bmi.n	8003e14 <_printf_i+0xe8>
 8003e0e:	0649      	lsls	r1, r1, #25
 8003e10:	bf48      	it	mi
 8003e12:	b2ad      	uxthmi	r5, r5
 8003e14:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e16:	6033      	str	r3, [r6, #0]
 8003e18:	bf14      	ite	ne
 8003e1a:	230a      	movne	r3, #10
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	4851      	ldr	r0, [pc, #324]	@ (8003f64 <_printf_i+0x238>)
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e26:	6866      	ldr	r6, [r4, #4]
 8003e28:	2e00      	cmp	r6, #0
 8003e2a:	bfa8      	it	ge
 8003e2c:	6821      	ldrge	r1, [r4, #0]
 8003e2e:	60a6      	str	r6, [r4, #8]
 8003e30:	bfa4      	itt	ge
 8003e32:	f021 0104 	bicge.w	r1, r1, #4
 8003e36:	6021      	strge	r1, [r4, #0]
 8003e38:	b90d      	cbnz	r5, 8003e3e <_printf_i+0x112>
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_printf_i+0x1aa>
 8003e3e:	4616      	mov	r6, r2
 8003e40:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e44:	fb03 5711 	mls	r7, r3, r1, r5
 8003e48:	5dc7      	ldrb	r7, [r0, r7]
 8003e4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e4e:	462f      	mov	r7, r5
 8003e50:	42bb      	cmp	r3, r7
 8003e52:	460d      	mov	r5, r1
 8003e54:	d9f4      	bls.n	8003e40 <_printf_i+0x114>
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d10b      	bne.n	8003e72 <_printf_i+0x146>
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	07df      	lsls	r7, r3, #31
 8003e5e:	d508      	bpl.n	8003e72 <_printf_i+0x146>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6861      	ldr	r1, [r4, #4]
 8003e64:	4299      	cmp	r1, r3
 8003e66:	bfde      	ittt	le
 8003e68:	2330      	movle	r3, #48	@ 0x30
 8003e6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e72:	1b92      	subs	r2, r2, r6
 8003e74:	6122      	str	r2, [r4, #16]
 8003e76:	464b      	mov	r3, r9
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4640      	mov	r0, r8
 8003e7c:	f8cd a000 	str.w	sl, [sp]
 8003e80:	aa03      	add	r2, sp, #12
 8003e82:	f7ff fee1 	bl	8003c48 <_printf_common>
 8003e86:	3001      	adds	r0, #1
 8003e88:	d14a      	bne.n	8003f20 <_printf_i+0x1f4>
 8003e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8e:	b004      	add	sp, #16
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	6023      	str	r3, [r4, #0]
 8003e9c:	2778      	movs	r7, #120	@ 0x78
 8003e9e:	4832      	ldr	r0, [pc, #200]	@ (8003f68 <_printf_i+0x23c>)
 8003ea0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	6831      	ldr	r1, [r6, #0]
 8003ea8:	061f      	lsls	r7, r3, #24
 8003eaa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003eae:	d402      	bmi.n	8003eb6 <_printf_i+0x18a>
 8003eb0:	065f      	lsls	r7, r3, #25
 8003eb2:	bf48      	it	mi
 8003eb4:	b2ad      	uxthmi	r5, r5
 8003eb6:	6031      	str	r1, [r6, #0]
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	bf44      	itt	mi
 8003ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b11d      	cbz	r5, 8003ecc <_printf_i+0x1a0>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	e7ab      	b.n	8003e20 <_printf_i+0xf4>
 8003ec8:	4826      	ldr	r0, [pc, #152]	@ (8003f64 <_printf_i+0x238>)
 8003eca:	e7e9      	b.n	8003ea0 <_printf_i+0x174>
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f023 0320 	bic.w	r3, r3, #32
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	e7f6      	b.n	8003ec4 <_printf_i+0x198>
 8003ed6:	4616      	mov	r6, r2
 8003ed8:	e7bd      	b.n	8003e56 <_printf_i+0x12a>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	6825      	ldr	r5, [r4, #0]
 8003ede:	1d18      	adds	r0, r3, #4
 8003ee0:	6961      	ldr	r1, [r4, #20]
 8003ee2:	6030      	str	r0, [r6, #0]
 8003ee4:	062e      	lsls	r6, r5, #24
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	d501      	bpl.n	8003eee <_printf_i+0x1c2>
 8003eea:	6019      	str	r1, [r3, #0]
 8003eec:	e002      	b.n	8003ef4 <_printf_i+0x1c8>
 8003eee:	0668      	lsls	r0, r5, #25
 8003ef0:	d5fb      	bpl.n	8003eea <_printf_i+0x1be>
 8003ef2:	8019      	strh	r1, [r3, #0]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	e7bc      	b.n	8003e76 <_printf_i+0x14a>
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	2100      	movs	r1, #0
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	6032      	str	r2, [r6, #0]
 8003f04:	681e      	ldr	r6, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 f859 	bl	8003fc0 <memchr>
 8003f0e:	b108      	cbz	r0, 8003f14 <_printf_i+0x1e8>
 8003f10:	1b80      	subs	r0, r0, r6
 8003f12:	6060      	str	r0, [r4, #4]
 8003f14:	6863      	ldr	r3, [r4, #4]
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f1e:	e7aa      	b.n	8003e76 <_printf_i+0x14a>
 8003f20:	4632      	mov	r2, r6
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	47d0      	blx	sl
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d0ad      	beq.n	8003e8a <_printf_i+0x15e>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	079b      	lsls	r3, r3, #30
 8003f32:	d413      	bmi.n	8003f5c <_printf_i+0x230>
 8003f34:	68e0      	ldr	r0, [r4, #12]
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	4298      	cmp	r0, r3
 8003f3a:	bfb8      	it	lt
 8003f3c:	4618      	movlt	r0, r3
 8003f3e:	e7a6      	b.n	8003e8e <_printf_i+0x162>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4632      	mov	r2, r6
 8003f44:	4649      	mov	r1, r9
 8003f46:	4640      	mov	r0, r8
 8003f48:	47d0      	blx	sl
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d09d      	beq.n	8003e8a <_printf_i+0x15e>
 8003f4e:	3501      	adds	r5, #1
 8003f50:	68e3      	ldr	r3, [r4, #12]
 8003f52:	9903      	ldr	r1, [sp, #12]
 8003f54:	1a5b      	subs	r3, r3, r1
 8003f56:	42ab      	cmp	r3, r5
 8003f58:	dcf2      	bgt.n	8003f40 <_printf_i+0x214>
 8003f5a:	e7eb      	b.n	8003f34 <_printf_i+0x208>
 8003f5c:	2500      	movs	r5, #0
 8003f5e:	f104 0619 	add.w	r6, r4, #25
 8003f62:	e7f5      	b.n	8003f50 <_printf_i+0x224>
 8003f64:	080040ff 	.word	0x080040ff
 8003f68:	08004110 	.word	0x08004110

08003f6c <memmove>:
 8003f6c:	4288      	cmp	r0, r1
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	eb01 0402 	add.w	r4, r1, r2
 8003f74:	d902      	bls.n	8003f7c <memmove+0x10>
 8003f76:	4284      	cmp	r4, r0
 8003f78:	4623      	mov	r3, r4
 8003f7a:	d807      	bhi.n	8003f8c <memmove+0x20>
 8003f7c:	1e43      	subs	r3, r0, #1
 8003f7e:	42a1      	cmp	r1, r4
 8003f80:	d008      	beq.n	8003f94 <memmove+0x28>
 8003f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f8a:	e7f8      	b.n	8003f7e <memmove+0x12>
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	4402      	add	r2, r0
 8003f90:	428a      	cmp	r2, r1
 8003f92:	d100      	bne.n	8003f96 <memmove+0x2a>
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f9e:	e7f7      	b.n	8003f90 <memmove+0x24>

08003fa0 <_sbrk_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4d05      	ldr	r5, [pc, #20]	@ (8003fbc <_sbrk_r+0x1c>)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	602b      	str	r3, [r5, #0]
 8003fac:	f7fc fd1c 	bl	80009e8 <_sbrk>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_sbrk_r+0x1a>
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_sbrk_r+0x1a>
 8003fb8:	6023      	str	r3, [r4, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	200002dc 	.word	0x200002dc

08003fc0 <memchr>:
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	b2c9      	uxtb	r1, r1
 8003fc6:	4402      	add	r2, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	d101      	bne.n	8003fd2 <memchr+0x12>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e003      	b.n	8003fda <memchr+0x1a>
 8003fd2:	7804      	ldrb	r4, [r0, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	428c      	cmp	r4, r1
 8003fd8:	d1f6      	bne.n	8003fc8 <memchr+0x8>
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <memcpy>:
 8003fdc:	440a      	add	r2, r1
 8003fde:	4291      	cmp	r1, r2
 8003fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fe4:	d100      	bne.n	8003fe8 <memcpy+0xc>
 8003fe6:	4770      	bx	lr
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff4:	d1f9      	bne.n	8003fea <memcpy+0xe>
 8003ff6:	bd10      	pop	{r4, pc}

08003ff8 <_realloc_r>:
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4615      	mov	r5, r2
 8004000:	460c      	mov	r4, r1
 8004002:	b921      	cbnz	r1, 800400e <_realloc_r+0x16>
 8004004:	4611      	mov	r1, r2
 8004006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800400a:	f7ff bc39 	b.w	8003880 <_malloc_r>
 800400e:	b92a      	cbnz	r2, 800401c <_realloc_r+0x24>
 8004010:	f7ff fbcc 	bl	80037ac <_free_r>
 8004014:	2400      	movs	r4, #0
 8004016:	4620      	mov	r0, r4
 8004018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800401c:	f000 f81a 	bl	8004054 <_malloc_usable_size_r>
 8004020:	4285      	cmp	r5, r0
 8004022:	4606      	mov	r6, r0
 8004024:	d802      	bhi.n	800402c <_realloc_r+0x34>
 8004026:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800402a:	d8f4      	bhi.n	8004016 <_realloc_r+0x1e>
 800402c:	4629      	mov	r1, r5
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fc26 	bl	8003880 <_malloc_r>
 8004034:	4607      	mov	r7, r0
 8004036:	2800      	cmp	r0, #0
 8004038:	d0ec      	beq.n	8004014 <_realloc_r+0x1c>
 800403a:	42b5      	cmp	r5, r6
 800403c:	462a      	mov	r2, r5
 800403e:	4621      	mov	r1, r4
 8004040:	bf28      	it	cs
 8004042:	4632      	movcs	r2, r6
 8004044:	f7ff ffca 	bl	8003fdc <memcpy>
 8004048:	4621      	mov	r1, r4
 800404a:	4640      	mov	r0, r8
 800404c:	f7ff fbae 	bl	80037ac <_free_r>
 8004050:	463c      	mov	r4, r7
 8004052:	e7e0      	b.n	8004016 <_realloc_r+0x1e>

08004054 <_malloc_usable_size_r>:
 8004054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004058:	1f18      	subs	r0, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	bfbc      	itt	lt
 800405e:	580b      	ldrlt	r3, [r1, r0]
 8004060:	18c0      	addlt	r0, r0, r3
 8004062:	4770      	bx	lr

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
